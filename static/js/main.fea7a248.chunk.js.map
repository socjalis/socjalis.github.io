{"version":3,"sources":["ChessEngine/chessConsts.ts","ChessEngine/minMax.ts","ChessEngine/chessEngine.ts","CustomChessboard/CustomChessboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["pieceValues","MinMaxNode","min","depth","value","score","_children","_score","this","resultArray","numberOfChildren","length","result","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","numberOfPositions","i","childValue","resolve","console","log","Error","children","maxScore","countPiecePoints","board","j","square","color","WHITE","type","positionScore","chess","gameFinish","checkmateScore","turn","inCheckmate","inStalemate","scoreGameFinish","getChildrenPositions","node","maxDepth","moves","gameOver","movesLength","move","child","push","childChess","Chess","fen","calculateNextMove","BLACK","root","start","Date","getTime","end","minMaxResult","moveList","createMinMaxTree","CustomChessboard","props","useState","position","setPosition","thinking","setThinking","setLastMove","className","onDrop","event","from","sourceSquare","to","targetSquare","setTimeout","nextMove","style","fontSize","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAEaA,EAA2C,CACpD,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,G,wBCRIC,EAAb,WAQI,WAAYC,EAAcC,EAAeC,EAAUC,GAAiB,yBAP5DH,SAO2D,OAN3DI,eAM2D,OAL3DH,WAK2D,OAJ3DC,WAI2D,OAF3DG,YAE2D,EAC/DC,KAAKN,IAAMA,EACXM,KAAKF,UAAY,GACjBE,KAAKL,MAAQA,EACbK,KAAKD,OAASF,EACdG,KAAKJ,MAAQA,EAbrB,2CAgBI,WAEI,IAAIK,EAAmB,GACnBC,EAAmBF,KAAKF,UAAUK,OAClCC,EAASJ,KAAKN,IACZW,OAAOC,iBACPD,OAAOE,iBACTC,EAAoB,EAExB,GAAIR,KAAKF,UAAUK,OAAS,EAAG,CAC3B,IAAK,IAAIM,EAAI,EAAGA,EAAIP,EAAkBO,IAAK,CACvC,IAAMC,EAAaV,KAAKF,UAAUW,GAAGE,UACrCH,GAAqBE,EAAWF,kBAC5BR,KAAKN,IACDgB,EAAWb,MAAQO,IACnBA,EAASM,EAAWb,MACpBI,EAAcS,EAAWT,aAGzBS,EAAWb,MAAQO,IACnBA,EAASM,EAAWb,MACpBI,EAAcS,EAAWT,aAIrC,MAAO,CACHJ,MAAOO,EACPH,YAAY,CAAED,KAAKJ,OAAR,mBAAkBK,IAC7BO,kBAAmBA,GAEpB,GAAmB,MAAfR,KAAKD,OACZ,MAAO,CACHF,MAAOG,KAAKD,OACZE,YAAa,CAACD,KAAKJ,OACnBY,kBAAmB,GAIvB,MADAI,QAAQC,IAAIb,MACNc,MAAM,wBAtDxB,oBA0DI,SAAaC,GACTf,KAAKF,UAAYiB,IA3DzB,iBA8DI,SAAUlB,GACNG,KAAKD,OAASF,MA/DtB,KCIMmB,EAAW,IAMXC,EAAmB,SAACC,GAGtB,IAFA,IAAIrB,EAAQ,EAEHY,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIU,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMC,EAASF,EAAMT,GAAGU,GACpBC,IACIA,EAAOC,QAAUC,QACjBzB,GAASL,EAAY4B,EAAOG,MAE5B1B,GAASL,EAAY4B,EAAOG,OAK5C,OAAO1B,GAsEL2B,EAAgB,SAACC,GACnB,IAAMC,EApEc,SAACD,GACrB,IAAME,EAAiBF,EAAMG,SAAWN,QAAQN,GAAW,IAC3D,OAAOS,EAAMI,cACPF,EACAF,EAAMK,cACN,EACA,KA8DaC,CAAgBN,GACnC,OAAkB,MAAdC,EACOA,EAEQT,EAAiBQ,EAAMP,UAKxCc,EAAuB,SAAvBA,EACFC,EACAR,EACAS,EACAvC,EACAD,GAEA,IAAMyC,EAAQV,EAAMU,QACpB,GAAIxC,EAAQuC,IAAaT,EAAMW,WAAY,CAIvC,IAHA,IAAMrB,EAAW,GACXsB,EAAcF,EAAMhC,OAEjBM,EAAI,EAAGA,EAAI4B,EAAa5B,IAAK,CAClC,IAAM6B,EAAOH,EAAM1B,GACb8B,EAAQ,IAAI9C,GAAoBC,EAAKC,EAAQ,EAAG2C,GACtDvB,EAASyB,KAAKD,GAEd,IAAME,EAAa,IAAIC,QAAMjB,EAAMkB,OACnCF,EAAWH,KAAKA,GAChBN,EAAqBO,EAAOE,EAAYP,EAAUvC,EAAQ,GAAID,GAGlEuC,EAAKlB,SAAWA,OAEhBkB,EAAKpC,MAAQ2B,EAAcC,IAWtBmB,EAAoB,SAACD,GAI9B,OAhEqB,SAAClB,EAAcS,GACpC,IAAMxC,EAAM+B,EAAMG,SAAWiB,QACvBC,EAAO,IAAIrD,EAAmBC,EAAK,EAAG,IACtCqD,GAAQ,IAAIC,MAAOC,UACzBjB,EAAqBc,EAAMrB,EAAOS,EAAU,EAAGxC,GAC/C,IAAMwD,GAAM,IAAIF,MAAOC,UACvBrC,QAAQC,IAAIqC,EAAMH,GAClB,IAAMI,EAAeL,EAAKnC,UACpByC,EAAWD,EAAalD,YAI9B,OAFAW,QAAQC,IAAIsC,EAAa3C,mBAElB4C,EAAS,GAkDKC,CADP,IAAIX,QAAMC,GACqB,I,OCpIpCW,EAAmB,SAACC,GAAkC,IAAD,EAC9BC,mBAAiB,4DADa,mBACvDC,EADuD,KAC7CC,EAD6C,OAE9BF,oBAAkB,GAFY,mBAEvDG,EAFuD,KAE7CC,EAF6C,OAG9BJ,mBAA6B,MAHC,mBAG7CK,GAH6C,aAIxCL,oBAAkB,GAJsB,mBAIvDN,EAJuD,UAqC9D,OAAO,qCACH,qBAAKY,UAAU,aAAf,SAEI,cAAC,IAAD,CACIL,SAAUA,EACVM,OAxBG,SAACC,GACZ,IAAMvC,EAAQ,IAAIiB,QAAMe,KACFhC,EAAMa,KAAK,CAAE2B,KAAMD,EAAME,aAAcC,GAAIH,EAAMI,iBAEnEV,EAAYjC,EAAMkB,OAClBkB,EAAY,CAAEI,KAAMD,EAAME,aAAcC,GAAIH,EAAMI,eAC7C3C,EAAMW,aACPwB,GAAY,GACZS,YAAW,WACP,IAAMC,EAAW1B,EAAkBnB,EAAMkB,OACzClB,EAAMa,KAAKgC,GACXZ,EAAYjC,EAAMkB,OAClBkB,EAAY,CAAEI,KAAMD,EAAME,aAAcC,GAAIH,EAAMI,eAClDR,GAAY,KACb,WAqBX,sBAAKE,UAAU,aAAaS,MAAO,CAAEC,SAAU,QAA/C,UACKb,EAAW,8BAAgC,qBAC3CT,GAAO,mBCrDLuB,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCOSY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fea7a248.chunk.js","sourcesContent":["import { PieceSymbol } from '@lubert/chess.ts'\r\n\r\nexport const pieceValues: Record<PieceSymbol, number> = {\r\n    'p': 100,\r\n    'n': 270,\r\n    'b': 300,\r\n    'r': 500,\r\n    'q': 900,\r\n    'k': 0\r\n}","export class MinMaxNode<T> {\r\n    private min: boolean;\r\n    private _children: MinMaxNode<T>[];\r\n    private depth: number;\r\n    private value: T;\r\n\r\n    private _score: number | undefined;\r\n\r\n    constructor(min: boolean, depth: number, value: T, score?: number) {\r\n        this.min = min;\r\n        this._children = [];\r\n        this.depth = depth;\r\n        this._score = score;\r\n        this.value = value;\r\n    }\r\n\r\n    resolve(): { score: number; resultArray: T[]; numberOfPositions: number } {\r\n        // console.log(this.value, this.depth);\r\n        let resultArray: T[] = [];\r\n        let numberOfChildren = this._children.length;\r\n        let result = this.min\r\n            ? Number.MAX_SAFE_INTEGER\r\n            : Number.MIN_SAFE_INTEGER;\r\n        let numberOfPositions = 1;\r\n\r\n        if (this._children.length > 0) {\r\n            for (let i = 0; i < numberOfChildren; i++) {\r\n                const childValue = this._children[i].resolve();\r\n                numberOfPositions += childValue.numberOfPositions;\r\n                if (this.min) {\r\n                    if (childValue.score < result) {\r\n                        result = childValue.score;\r\n                        resultArray = childValue.resultArray;\r\n                    }\r\n                } else {\r\n                    if (childValue.score > result) {\r\n                        result = childValue.score;\r\n                        resultArray = childValue.resultArray;\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                score: result,\r\n                resultArray: [this.value, ...resultArray],\r\n                numberOfPositions: numberOfPositions,\r\n            };\r\n        } else if (this._score != null)\r\n            return {\r\n                score: this._score,\r\n                resultArray: [this.value],\r\n                numberOfPositions: 1,\r\n            };\r\n        else {\r\n            console.log(this);\r\n            throw Error(\"zesral sie min max\");\r\n        }\r\n    }\r\n\r\n    set children(children: MinMaxNode<T>[]) {\r\n        this._children = children;\r\n    }\r\n\r\n    set score(score: number) {\r\n        this._score = score;\r\n    }\r\n}\r\n","import { BLACK, Chess, Color, Piece, WHITE } from \"@lubert/chess.ts\";\r\nimport { pieceValues } from \"./chessConsts\";\r\nimport { MinMaxNode } from \"./minMax\";\r\n\r\nconst maxScore = 1000000;\r\n\r\nconst getPossibleMoves = (chess: Chess): string[] => {\r\n    return chess.moves();\r\n};\r\n\r\nconst countPiecePoints = (board: (Piece | null)[][]): number => {\r\n    let score = 0;\r\n\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            const square = board[i][j];\r\n            if (square) {\r\n                if (square.color === WHITE) {\r\n                    score += pieceValues[square.type];\r\n                } else {\r\n                    score -= pieceValues[square.type];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return score;\r\n};\r\n\r\nconst scoreGameFinish = (chess: Chess): number | null => {\r\n    const checkmateScore = chess.turn() === WHITE ? maxScore : -maxScore;\r\n    return chess.inCheckmate()\r\n        ? checkmateScore\r\n        : chess.inStalemate()\r\n        ? 0\r\n        : null;\r\n};\r\n\r\nconst getBestScoreMoveWithScore = (\r\n    chess: Chess,\r\n    color: Color\r\n): { move: string; score: number } => {\r\n    const moves = chess.moves();\r\n    const fen = chess.fen();\r\n\r\n    let bestScore =\r\n        color === WHITE ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\r\n    let bestMoves: string[] = [];\r\n\r\n    const movesLength = moves.length;\r\n\r\n    for (let i = 0; i < movesLength; i++) {\r\n        const move = moves[i];\r\n        const chessWithMove = new Chess(fen);\r\n        chessWithMove.move(move);\r\n\r\n        let score = countPiecePoints(chessWithMove.board());\r\n\r\n        if (chessWithMove.inStalemate()) {\r\n            score = 0;\r\n        } else if (chessWithMove.inCheckmate()) {\r\n            score =\r\n                color === WHITE\r\n                    ? Number.MAX_SAFE_INTEGER\r\n                    : Number.MIN_SAFE_INTEGER;\r\n        }\r\n\r\n        if (score === bestScore) {\r\n            bestMoves.push(move);\r\n        } else if (\r\n            (color === WHITE && score > bestScore) ||\r\n            (color === BLACK && score < bestScore)\r\n        ) {\r\n            bestScore = score;\r\n            bestMoves = [move];\r\n        }\r\n    }\r\n\r\n    return { move: selectRandomMove(bestMoves), score: bestScore };\r\n};\r\n\r\nconst createMinMaxTree = (chess: Chess, maxDepth: number): string => {\r\n    const min = chess.turn() === BLACK;\r\n    const root = new MinMaxNode<string>(min, 0, \"\");\r\n    const start = new Date().getTime();\r\n    getChildrenPositions(root, chess, maxDepth, 0, min);\r\n    const end = new Date().getTime();\r\n    console.log(end - start);\r\n    const minMaxResult = root.resolve();\r\n    const moveList = minMaxResult.resultArray;\r\n\r\n    console.log(minMaxResult.numberOfPositions);\r\n\r\n    return moveList[1];\r\n};\r\n\r\nconst positionScore = (chess: Chess) => {\r\n    const gameFinish = scoreGameFinish(chess);\r\n    if (gameFinish != null) {\r\n        return gameFinish;\r\n    } else {\r\n        const pieces = countPiecePoints(chess.board());\r\n        return pieces;\r\n    }\r\n};\r\n\r\nconst getChildrenPositions = (\r\n    node: MinMaxNode<string>,\r\n    chess: Chess,\r\n    maxDepth: number,\r\n    depth: number,\r\n    min: boolean\r\n) => {\r\n    const moves = chess.moves();\r\n    if (depth < maxDepth && !chess.gameOver()) {\r\n        const children = [];\r\n        const movesLength = moves.length;\r\n\r\n        for (let i = 0; i < movesLength; i++) {\r\n            const move = moves[i];\r\n            const child = new MinMaxNode<string>(!min, depth + 1, move);\r\n            children.push(child);\r\n\r\n            const childChess = new Chess(chess.fen());\r\n            childChess.move(move);\r\n            getChildrenPositions(child, childChess, maxDepth, depth + 1, !min);\r\n        }\r\n\r\n        node.children = children;\r\n    } else {\r\n        node.score = positionScore(chess);\r\n    }\r\n};\r\n\r\nconst selectRandomMove = (moves: string[]) => {\r\n    const randomMoveIndex = Math.floor(Math.random() * moves.length);\r\n    const randomMove = moves[randomMoveIndex];\r\n\r\n    return randomMove;\r\n};\r\n\r\nexport const calculateNextMove = (fen: string) => {\r\n    const chess = new Chess(fen);\r\n    const move: string = createMinMaxTree(chess, 3);\r\n\r\n    return move;\r\n};\r\n","import Chessboard, { Piece } from 'chessboardjsx'\r\nimport { useState } from 'react'\r\nimport { calculateNextMove } from '../ChessEngine/chessEngine';\r\nimport { Chess } from '@lubert/chess.ts'\r\nimport { PartialMove, Square } from '@lubert/chess.ts/dist/types';\r\n\r\nexport interface CustomChessboardProps {\r\n\r\n}\r\n\r\nexport const CustomChessboard = (props: CustomChessboardProps) => {\r\n    const [position, setPosition] = useState<string>('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\r\n    const [thinking, setThinking] = useState<boolean>(false);\r\n    const [lastMove, setLastMove] = useState<PartialMove | null>(null);\r\n    const [end, setEnd] = useState<boolean>(false);\r\n\r\n    // const start =  new Date().getTime();\r\n    // const x = new Chess(position);\r\n    // x.move('e4');\r\n    // x.inCheckmate();\r\n    // x.inDraw();\r\n    // x.inStalemate();\r\n    // x.moves()\r\n    // x.moves()\r\n\r\n    // const end = new Date().getTime();\r\n    // console.log(end - start)\r\n\r\n    const onDrop = (event: { sourceSquare: Square, targetSquare: Square, piece: Piece }) => {\r\n        const chess = new Chess(position);\r\n        const isMoveLegal = !!chess.move({ from: event.sourceSquare, to: event.targetSquare });\r\n        if (isMoveLegal) {\r\n            setPosition(chess.fen());\r\n            setLastMove({ from: event.sourceSquare, to: event.targetSquare });\r\n            if (!chess.gameOver()) {\r\n                setThinking(true);\r\n                setTimeout(() => {\r\n                    const nextMove = calculateNextMove(chess.fen());\r\n                    chess.move(nextMove);\r\n                    setPosition(chess.fen());\r\n                    setLastMove({ from: event.sourceSquare, to: event.targetSquare });\r\n                    setThinking(false);\r\n                }, 10);\r\n            }\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <div className=\"chessboard\">\r\n\r\n            <Chessboard\r\n                position={position}\r\n                onDrop={onDrop}\r\n                // squareStyles={lastMove ? {\r\n                //     [lastMove.from]: {\r\n                //         backgroundColor: '#5abb5f'\r\n                //     },\r\n                //     [lastMove.to]: {\r\n                //         backgroundColor: '#5abb5f'\r\n                //     }\r\n                // } : undefined}\r\n            />\r\n        </div>\r\n        <div className=\"chessboard\" style={{ fontSize: '2rem' }}>\r\n            {thinking ? 'Daj mi pomyslec do hxuja...' : 'Super silnik kurwa'}\r\n            {end && 'NO I CHUJ'}\r\n        </div>\r\n    </>\r\n}","import React from 'react';\nimport './App.css';\nimport { CustomChessboard } from './CustomChessboard/CustomChessboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CustomChessboard />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}